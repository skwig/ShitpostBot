// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShitpostBot.Domain;
using ShitpostBot.Infrastructure;

#nullable disable

namespace ShitpostBot.Infrastructure.Migrations
{
    [DbContext(typeof(ShitpostBotDbContext))]
    [Migration("20231209180203_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShitpostBot.Domain.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("ChatChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ChatGuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ChatMessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset?>("EvaluatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("PostedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PosterId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("TrackedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PostedOn");

                    b.HasIndex("PosterId");

                    b.ToTable("Post");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ShitpostBot.Domain.ImagePost", b =>
                {
                    b.HasBaseType("ShitpostBot.Domain.Post");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("ShitpostBot.Domain.LinkPost", b =>
                {
                    b.HasBaseType("ShitpostBot.Domain.Post");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ShitpostBot.Domain.ImagePost", b =>
                {
                    b.OwnsOne("ShitpostBot.Domain.Image", "Image", b1 =>
                        {
                            b1.Property<long>("ImagePostId")
                                .HasColumnType("bigint");

                            b1.Property<decimal>("ImageId")
                                .HasColumnType("numeric(20,0)");

                            b1.Property<string>("ImageUri")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ImagePostId");

                            b1.ToTable("Post");

                            b1.WithOwner()
                                .HasForeignKey("ImagePostId");

                            b1.OwnsOne("ShitpostBot.Domain.ImageFeatures", "ImageFeatures", b2 =>
                                {
                                    b2.Property<long>("ImagePostId")
                                        .HasColumnType("bigint");

                                    b2.Property<Vector>("FeatureVector")
                                        .IsRequired()
                                        .HasColumnType("vector");

                                    b2.HasKey("ImagePostId");

                                    b2.ToTable("Post");

                                    b2.WithOwner()
                                        .HasForeignKey("ImagePostId");
                                });

                            b1.Navigation("ImageFeatures");
                        });

                    b.Navigation("Image")
                        .IsRequired();
                });

            modelBuilder.Entity("ShitpostBot.Domain.LinkPost", b =>
                {
                    b.OwnsOne("ShitpostBot.Domain.Link", "Link", b1 =>
                        {
                            b1.Property<long>("LinkPostId")
                                .HasColumnType("bigint");

                            b1.Property<string>("LinkId")
                                .HasColumnType("text");

                            b1.Property<int>("LinkProvider")
                                .HasColumnType("integer");

                            b1.Property<string>("LinkUri")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("LinkPostId");

                            b1.ToTable("Post");

                            b1.WithOwner()
                                .HasForeignKey("LinkPostId");
                        });

                    b.Navigation("Link")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
